import { OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { BinanceService } from '../binance/binance.service';
import { PositionInfo, RequestedOrder } from './interfaces/trading.interface';
import { TradingViewWebhookDto } from 'src/common/dto/tradingview-webhook.dto';
import { SymbolStreamData } from 'src/binance/interfaces/symbol-stream.interface';
import { StorageService } from 'src/storage/storage.service';
export declare class TradingService implements OnModuleInit {
    private binanceService;
    private configService;
    private storageService;
    private readonly logger;
    private readonly maxPositionPercentage;
    private readonly maxLeverage;
    private positionInfo;
    constructor(binanceService: BinanceService, configService: ConfigService, storageService: StorageService);
    onModuleInit(): Promise<void>;
    processTradingSignal(signal: TradingViewWebhookDto): Promise<boolean>;
    getOrdersAndPositions(): Promise<PositionInfo>;
    cancelOrder(symbol: string, orderId: number): Promise<boolean>;
    setRequestedOrder(order: RequestedOrder): Promise<void>;
    getRequestedOrders(): Promise<RequestedOrder[]>;
    getRequestedOrder(orderId: number): Promise<RequestedOrder | undefined>;
    removeRequestedOrders(order: RequestedOrder): Promise<void>;
    private calculatePositionSize;
    private handleOrderUpdate;
    priceInfoCallback(data: SymbolStreamData): void;
    private placeSLTPOrders;
    private checkSymbolExists;
    private closeRelatedOrders;
}
