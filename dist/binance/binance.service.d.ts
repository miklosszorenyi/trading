import { OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { SymbolStreamData } from './interfaces/symbol-stream.interface';
import { OrderDTO, OrderType } from 'src/trading/interfaces/trading.interface';
export declare class BinanceService implements OnModuleInit, OnModuleDestroy {
    private configService;
    private readonly logger;
    private httpClient;
    private apiKey;
    private apiSecret;
    private baseURL;
    private wsBaseURL;
    private userDataStream;
    private listenKey;
    private keepAliveInterval;
    private orderUpdateCallback;
    private priceInfoCallback;
    private symbolStreams;
    constructor(configService: ConfigService);
    onModuleInit(): Promise<void>;
    onModuleDestroy(): Promise<void>;
    setOrderUpdateCallback(callback: (data: any) => void): void;
    setPriceInfoCallback(callback: (data: SymbolStreamData) => void): void;
    getAccountBalance(asset?: string): Promise<any>;
    getOpenOrders(symbol?: string): Promise<any>;
    getPositions(): Promise<any>;
    getSymbolPrice(symbol: string): Promise<number>;
    getSymbolInfo(symbol: string): Promise<any>;
    placeOrder(symbol: string, side: 'BUY' | 'SELL', quantity: number, stopPrice: number, type: OrderType): Promise<OrderDTO>;
    placeMarketOrder(symbol: string, side: 'BUY' | 'SELL', quantity: number, stopPrice: number): Promise<OrderDTO>;
    placeLimitOrder(symbol: string, side: 'BUY' | 'SELL', quantity: number, stopPrice: number): Promise<OrderDTO>;
    placeStopLossOrder(symbol: string, side: 'BUY' | 'SELL', quantity: number, stopPrice: number): Promise<OrderDTO>;
    placeTakeProfitOrder(symbol: string, side: 'BUY' | 'SELL', quantity: number, stopPrice: number): Promise<OrderDTO>;
    cancelOrder(symbol: string, orderId: number): Promise<any>;
    setLeverage(symbol: string, leverage: number): Promise<any>;
    addSymbolsToWatch(symbols: string[]): Promise<void>;
    private removeSymbolsFromWatch;
    private updateSymbolData;
    private createSignature;
    private makeSignedRequest;
    private setupPriceDataStream;
    private setupUserDataStream;
    private handleOrderUpdate;
    private cleanup;
}
